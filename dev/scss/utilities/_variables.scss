/// Add custom properties to :root from map
/// @todo prefix
///
/// @param {Map} $map - Map to elaborate
@mixin add-properties($map) {
    @at-root :root {
        @each $k, $v in $map {
            --c-#{$k}: #{$v};
        }
    }
}

/// Get index of map.value - map.key - list.value
///
/// @param {Map || List} $el - Variable to use for search
/// @param {String || Number} $val - Value to search
/// @param {String} $target ['value'] - Search for `value` or `key`
/// @param {Number} $operator [0] - Used to get prev or next values in $el
///
/// @returns {Number} Index of `$val` in `$el`
@function -get-index ($el, $val, $target: 'value', $operator: 0) {
    $res: 'null';

    @if (type-of($el) == 'map' or type-of($el) == 'list') and $target != 'key'{
        @if type-of($el) == 'map' {
            @each $k, $v in $el {
                @if $v == $val {
                    $res: index($el, ($k $v)) + $operator;
                    @if $res > length($el) {
                        @warn 'Assuming index `#{$res}` to be a lower than map length `#{length($el)}`';
                    }
                }
            }
        } @else if type-of($el) == 'list' {
            @each $v in $el {
                @if $v == $val {
                    $res: index($el, $v) + $operator;
                    @if $res > length($el) {
                        @warn 'Assuming index `#{$res}` to be a lower than list length `#{length($el)}`';
                    }
                }
            }
        }
    } @else if $target == 'key' and type-of($el) == 'map' {
        @each $k, $v in $el {
            @if $k == $val {
                $res: index($el, ($k $v)) + $operator;
                @if $res > length($el) {
                    @warn 'Assuming index `#{$res}` to be a lower than list length `#{length($el)}`';
                }
            }
        }
    } @else {
        @warn 'Assuming `#{$el}` to be a `map` or a `list`';
    }

    @if type-of($res) == 'false' {
        @warn '`#{$val}` #{$target} not found in `#{$el}`!';
    }

    @return $res;
}

/// Get value of map.value - map.key - list.value - string.letter from given index
///
/// @param {Map || List || String} $el - Variable to use for search
/// @param {String || Number} $index - Index to search
/// @param {String} $target ['value'] - Search for `value` or `key`
///
/// @returns {Number} Value of `$index` in `$el`
@function -get-value ($el, $index, $target: 'value') {
    $res: 'null';

    @if type-of($el) == 'list' or type-of($el) == 'string' {
        @if $index <= length($el) {
            $res: nth($el, $index);
        } @else {
            @warn 'Assuming index `#{$index}` to be a lower than max length `#{length($el)}`';
        }
    } @else if type-of($el) == 'map' {
        @if $target == 'key' {
            $valuesList: map-keys($el);
            $res: nth($valuesList, $index);
        } @else {
            $valuesList: map-values($el);
            $res: nth($valuesList, $index);
        }
    } @else {
        @warn 'Assuming `#{$el}` to be a `map`, a `list` or a `string`';
    }

    @return $res;
}
